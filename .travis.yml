stages:
  - name: lint
    if: branch = master OR branch =~ ^\d+\.\d+\.\d+$
  - name: compile
    if: branch = master OR branch =~ ^\d+\.\d+\.\d+$
  - name: test
    if: branch = master OR branch =~ ^\d+\.\d+\.\d+$
  - name: deploy
    if: branch =~ ^\d+\.\d+\.\d+$
jobs:
  include:
    - &carthage
      stage: compile
      osx_image: xcode8.3
      name: Carthage / Xcode 8.3
      os: osx
      language: objective-c
      script: carthage build --no-skip-current --configuration Release
    - <<: *carthage
      osx_image: xcode9.2
      name: Carthage / Xcode 9.2
    - <<: *carthage
      osx_image: xcode9.4
      name: Carthage / Xcode 9.4
    - <<: *carthage
      osx_image: xcode10
      name: Carthage / Xcode 10.0

    - &pod
      stage: lint
      osx_image: xcode8.3
      env: SWIFT=3.1
      name: pod lib lint --swift-version=3.1
      os: osx
      cache: cocoapods
      language: objective-c
      before_install: mv .github/PromiseKit.podspec .
      install: gem install cocoapods --prerelease --version 1.6.0.beta.1
      script: pod lib lint --subspec=PromiseKit/CorePromise --fail-fast --swift-version=$SWIFT
    - <<: *pod
      osx_image: xcode9.2
      env: SWIFT=3.2
      name: pod lib lint --swift-version=3.2
    - <<: *pod
      osx_image: xcode9.4
      env: SWIFT=3.3
      name: pod lib lint --swift-version=3.3
    - <<: *pod
      osx_image: xcode10
      env: SWIFT=3.4
      name: pod lib lint --swift-version=3.4
    - <<: *pod
      osx_image: xcode9.2
      env: SWIFT=4.0
      name: pod lib lint --swift-version=4.0
    - <<: *pod
      osx_image: xcode9.4
      env: SWIFT=4.1
      name: pod lib lint --swift-version=4.1
    - <<: *pod
      osx_image: xcode10
      env: SWIFT=4.2
      name: pod lib lint --swift-version=4.2
      
    - &linux
      stage: compile
      env: SWIFT_BUILD_VERSION=3 SWIFT_VERSION=4.0.3
      name: Linux / Swift 3.2
      os: linux
      dist: trusty
      sudo: required
      language: generic
      before_install: eval "$(curl -sL https://swiftenv.fuller.li/install.sh)"
      install: swift build -Xswiftc -swift-version -Xswiftc $SWIFT_BUILD_VERSION
      script: "true"
    - <<: *linux
      env: SWIFT_BUILD_VERSION=3 SWIFT_VERSION=4.1.2
      name: Linux / Swift 3.3
    - <<: *linux
      env: SWIFT_BUILD_VERSION=3 SWIFT_VERSION=4.2
      name: Linux / Swift 3.4
    - <<: *linux
      env: SWIFT_BUILD_VERSION=4 SWIFT_VERSION=4.0.3
      name: Linux / Swift 4.0
      stage: test
      script: swift test -Xswiftc -swift-version -Xswiftc 4
    - <<: *linux
      env: SWIFT_BUILD_VERSION=4 SWIFT_VERSION=4.1.2
      name: Linux / Swift 4.1
    - <<: *linux
      env: SWIFT_BUILD_VERSION=4 SWIFT_VERSION=4.2
      name: Linux / Swift 4.2
      stage: test
      script: swift test -Xswiftc -swift-version -Xswiftc 4

    - &test
      stage: test
      osx_image: xcode8.3
      name: macOS / Xcode 8.3
      os: osx
      language: objective-c
      env: DST='platform=OS X,arch=x86_64'
      before_install: |
        gem install xcpretty
        set -eo pipefail
      install:
        xcodebuild -scheme PromiseKit -target PromiseKit -destination="$DST" SWIFT_TREAT_WARNINGS_AS_ERRORS=YES build 2> /dev/null | xcpretty
      script: |
        xcodebuild -scheme PromiseKit -destination="$DST" -enableCodeCoverage YES test
      after_success:
        bash <(curl -s https://codecov.io/bash)
    - <<: *test
      name: macOS / Xcode 9.2
      osx_image: xcode9.2
    - <<: *test
      name: macOS / Xcode 9.4
      osx_image: xcode9.4
    - <<: *test
      name: macOS / Xcode 10.0
      osx_image: xcode10

    - <<: *test
      name: iOS / Xcode 8.3
      osx_image: xcode8.3
      env: DST='OS=10.3.1,name=iPhone SE'
    - <<: *test
      name: iOS / Xcode 9.2
      osx_image: xcode9.2
      env: DST='OS=11.2,name=iPhone SE'
    - <<: *test
      name: iOS / Xcode 9.4
      osx_image: xcode9.4
      env: DST='OS=11.4,name=iPhone SE'
    - <<: *test
      name: iOS / Xcode 10.0
      osx_image: xcode10
      env: DST='OS=12.0,name=iPhone SE'

    - <<: *test
      name: tvOS / Xcode 8.3
      osx_image: xcode8.3
      env: DST='OS=10.2,name=Apple TV 1080p'
    - <<: *test
      name: tvOS / Xcode 9.2
      osx_image: xcode9.2
      env: DST='OS=11.2,name=Apple TV'
    - <<: *test
      name: tvOS / Xcode 9.4
      osx_image: xcode9.4
      env: DST='OS=11.4,name=Apple TV'
    - <<: *test
      name: tvOS / Xcode 10.0
      env: DST='OS=12.0,name=Apple TV'
      osx_image: xcode10

    - stage: test
      name: Promises/A+ (via WebKit JavaScript Bridge)
      language: objective-c
      os: osx
      osx_image: xcode10
      before_install: |
        npm install -g npm
        gem install xcpretty
      install:
        bash -c "cd Tests/JS-A+; npm ci &>/dev/null && npm run --hide-modules build"
      script: |
        set -eo pipefail
        xcodebuild -scheme PromiseKit -target PMKJSA+Tests -enableCodeCoverage NO -only-testing:PMKJSA+Tests test 2> /dev/null | xcpretty
      #FIXME ^^ still builds *all* the tests
      cache:
        directories:
          - Tests/JS-A+/build
          - Tests/JS-A+/node_modules

    - &swiftpm
      stage: compile
      name: SwiftPM / macOS / Xcode 9.4
      os: osx
      osx_image: xcode9.4
      script: swift build
    - <<: *swiftpm
      osx_image: xcode10
      name: SwiftPM / macOS / Xcode 10.0

    - stage: deploy
      script: |
        set -euxo pipefail
        pod trunk push --verbose --swift-version=4.2 | ruby -e 'ARGF.each{ print "." }'
      # ^^ pipe because Travis times us out if there is no output
      # AND `pod` defaults to hardly any output
      # BUT `--verbose` generates so much output that Travis kills our script due to *too much* output!
      os: osx
      osx_image: xcode10
      language: objective-c

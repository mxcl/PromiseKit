#!/usr/bin/env ruby
OBJC = <<-__EOBJC__

#import "PromiseKit/Promise.h"
#import "PromiseKit+Foundation.m"
#import "PromiseKit+Social.m"  // test compiles
#import "PromiseKit+StoreKit.m"  // test compiles
#import <CommonCrypto/CommonCrypto.h>
    
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgnu-zero-variadic-macro-arguments"
@import XCTest;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wimplicit-retain-self"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunreachable-code"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgnu-zero-variadic-macro-arguments"

#define NSLog(...)
// prevent error logging here
#import "PromiseKit.m"
#undef NSLog
    
#define URL @"http://localhost:61231"
#define wait(t) [[NSRunLoop mainRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:t]]

typedef PMKPromise Promise;

int main() {
    @autoreleasepool {
        XCTSelfTestMain();
    }
}

@interface Tests : XCTestCase
@end


@implementation Tests {
    __block BOOL resolved;
    __block BOOL failme;
    PMKPromise *promise;
    void (^fulfiller)(id);
    void (^rejecter)(id);
}

- (void)setUp {
    [super setUp];
    promise = [PMKPromise new:^(id f, id r){
        fulfiller = f;
        rejecter = r;
    }];
}   


- (void)test_01_resolve {
    promise.then(^(NSNumber *o){
        resolved = YES;
        XCTAssertEqual(o.intValue, 1);
    });
    promise.catch(^{
        XCTFail();
    });
    fulfiller(@1);
    wait(0.05);
    XCTAssertTrue(resolved);
}

- (void)test_02_reject {
    promise.then(^{
        XCTFail();
    });
    promise.catch(^(NSError *error){
        XCTAssertEqualObjects(error.localizedDescription, @"2");
        resolved = YES;
    });
    rejecter(@2);
    wait(0.05);
    XCTAssertTrue(resolved);
}

- (void)test_03_throw {
    promise.then(^{
        @throw @1;
    }).catch(^(NSError *e){
        resolved = YES;
        XCTAssertEqualObjects(@1, e.userInfo[PMKUnderlyingExceptionKey]);
    });
    promise.catch(^{
        XCTFail();
    });
    fulfiller(@1);
    wait(0.05);
    XCTAssertTrue(resolved);
}

- (void)test_04_throw_doesnt_compromise_result {
    PMKPromise *nextPromise = promise.then(^{
        @throw @1;
    });
    fulfiller(@1);

    nextPromise.then(^{
        failme = YES;
    });
    nextPromise.catch(^{
        resolved = YES;
    });
    wait(0.05);
    XCTAssertTrue(resolved);
    XCTAssertFalse(failme);
}

- (void)test_05_throw_and_bubble {
    promise.then(^(id ii){
        XCTAssertEqual(5, [ii intValue]);
        @throw ii;
    }).catch(^(NSError *e){
        XCTAssertEqualObjects(e.userInfo[PMKUnderlyingExceptionKey], @5);
        resolved = YES;
    });
    fulfiller(@5);
    wait(0.05);
    XCTAssertTrue(resolved);
}

- (void)test_05_throw_and_bubble_more {
    promise.then(^{
        @throw @5;
    }).then(^{
        //NOOP
    }).catch(^(NSError *e){
        resolved = YES;
        XCTAssertEqualObjects(e.userInfo[PMKUnderlyingExceptionKey], @5);
    });
    fulfiller(@1);
    wait(0.05);
    XCTAssertTrue(resolved);
}

- (void)test_06_return_error {
    promise.then(^{
        return [NSError new];
    }).catch(^{
        resolved = YES;
    });
    fulfiller(@1);
    wait(0.05);
    XCTAssertTrue(resolved);
}

- (void)test_07_can_then_resolved {
    fulfiller(@1);
    promise.then(^(id o){
        resolved = YES;
        XCTAssertEqualObjects(@1, o);
    });
    wait(0.05);
    XCTAssertTrue(resolved);
}

- (void)test_07a_can_fail_rejected {
    rejecter(@1);
    promise.catch(^(NSError *e){
        resolved = YES;
        XCTAssertEqualObjects(@"1", e.localizedDescription);
    });
    wait(0.05);
    XCTAssertTrue(resolved);
}

- (void)test_08_url_connection {
    [NSURLConnection GET:URL].then(^{
        resolved = YES;
    });

    wait(0.2);

    XCTAssertTrue(resolved);    
}

- (void)test_09_async {
    __block int x = 0;
    [NSURLConnection GET:URL].then(^{
        XCTAssertEqual(x, 0);
        x++;
    }).then(^{
        XCTAssertEqual(x, 1);
        x++;
    });
    wait(0.1);
    XCTAssertEqual(x, 2);
}

- (void)test_10_then_returns_resolved_promise {
    promise.then(^(id o){
        XCTAssertEqualObjects(@10, o);
        return [PMKPromise new:^(PMKPromiseFulfiller _fulfiller, id r){
            _fulfiller(@100);
        }];
    }).then(^(id o){
        XCTAssertEqualObjects(@100, o);
        resolved = YES;
    });
    fulfiller(@10);
    wait(0.05);
    XCTAssertTrue(resolved);
}

- (void)test_11_then_returns_pending_promise {
    promise.then(^{
        return [NSURLConnection GET:URL];
    }).then(^(id o){
        XCTAssertEqualObjects(@"hi", o);
        resolved = YES;
    });
    fulfiller(@1);
    wait(0.2);
    XCTAssertTrue(resolved);
}

- (void)test_12_then_returns_recursive_promises {
    __block int x = 0;
    [NSURLConnection GET:URL].then(^{
        XCTAssertEqual(x++, 0);
        return [NSURLConnection GET:URL].then(^{
            XCTAssertEqual(x++, 1);
            return [NSURLConnection GET:URL].then(^{
                XCTAssertEqual(x++, 2);
                return [NSURLConnection GET:URL].then(^{
                    XCTAssertEqual(x++, 3);
                    return @"foo";
                });
            });
        });
    }).then(^(id o){
        XCTAssertEqualObjects(@"foo", o);
        XCTAssertEqual(x++, 4);
    });
    wait(0.2);
    XCTAssertEqual(x, 5);
}

- (void)test_13_then_returns_recursive_promises_that_fails {
    [NSURLConnection GET:URL].then(^{
        return [NSURLConnection GET:URL].then(^{
            return [NSURLConnection GET:URL].then(^{
                return [NSURLConnection GET:URL].then(^{
                    @throw @1;
                });
            });
        });
    }).then(^{
        XCTFail();
    }).catch(^(NSError *e){
        XCTAssertEqualObjects(e.userInfo[PMKUnderlyingExceptionKey], @1);
        resolved = YES;
    });
    wait(0.2);
    XCTAssertTrue(resolved);
}

- (void)test_14_fail_returns_value {
    promise.then(^{
        @throw @1;
    }).catch(^(NSError *e){
        XCTAssertEqualObjects(e.userInfo[PMKUnderlyingExceptionKey], @1);
        return @2;
    }).then(^(id o){
        XCTAssertEqualObjects(o, @2);
        resolved = YES;
    });
    fulfiller(@1);
    wait(0.05);
    XCTAssertTrue(resolved);
}

- (void)test_15_fail_returns_promise {
    promise.then(^{
        @throw @1;
    }).catch(^{
        return [NSURLConnection GET:URL];
    }).then(^(id o){
        XCTAssertEqualObjects(o, @"hi");
        resolved = YES;
    });
    fulfiller(@1);
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_18_when {
    id a = [NSURLConnection GET:URL];
    id b = [NSURLConnection GET:URL];
    [PMKPromise when:@[a, b]].then(^(NSArray *objs){
        XCTAssertEqual(objs.count, 2ul);
        XCTAssertEqualObjects(objs[0], objs[1]);
        resolved = YES;
    });
    wait(0.2);
    XCTAssertTrue(resolved);
}

- (void)test_20_md5 {
    id input = @"hi";

    dispatch_promise(^{
        XCTAssertFalse([NSThread isMainThread]);

        const char *cstr = [input UTF8String];
        NSUInteger const clen = [input lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
        unsigned char result[16];
        CC_MD5(cstr, (CC_LONG)clen, result);
        return [NSString stringWithFormat:@"%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X",
             result[0],  result[1],  result[2],  result[3],
             result[4],  result[5],  result[6],  result[7],
             result[8],  result[9], result[10], result[11],
            result[12], result[13], result[14], result[15]];

    }).then(^(id md5){
        XCTAssertEqualObjects(md5, @"49F68A5C8493EC2C0BF489821C21FC3B");
        resolved = YES;
    });
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_21_recursive_when {
    id a = [NSURLConnection GET:URL].then(^{
        @throw @NO;
    });
    id b = [NSURLConnection GET:URL];
    id c = [PMKPromise when:@[a, b]];
    [PMKPromise when:c].then(^{
        XCTFail();
    }).catch(^(NSError *e){
        XCTAssertEqualObjects(e.userInfo[PMKFailingPromiseIndexKey], @0);
        XCTAssertEqualObjects(e.userInfo[PMKUnderlyingExceptionKey], @NO);
        resolved = YES;
    });
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_22_already_resolved_and_bubble {
    __block int x = 0;

    promise.then(^{
        XCTFail();
    }).catch(^(NSError *e){
        XCTAssertEqualObjects(e.localizedDescription, @"22");
        x++;
    });
    rejecter(@22);
    
    [PMKPromise when:promise].then(^{
        XCTFail();
    }).catch(^{
        x++;
    });

    wait(0.1);
    XCTAssertEqual(x, 2);
}

- (void)test_23_add_another_fail_to_already_rejected {
    __block int x = 0;

    promise.then(^{
        XCTFail();
    }).catch(^(NSError *e){
        XCTAssertEqualObjects(e.localizedDescription, @"23");
        x++;
    });
    rejecter(@23);
    
    promise.then(^{
        XCTFail();
    }).catch(^(NSError *e){
        XCTAssertEqualObjects(e.localizedDescription, @"23");
        x++;
    });

    wait(0.1);
    XCTAssertEqual(x, 2);
}

- (void)test_24_some_edge_case {
    id a = [NSURLConnection GET:URL].catch(^{});
    id b = [NSURLConnection GET:URL];
    [PMKPromise when:@[a, b]].then(^(NSArray *objs){
        resolved = YES;
    });
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_25_then_plus_deferred_plus_GCD {
    __block int x = 0;
    [NSURLConnection GET:URL].then(^(id o){
        XCTAssertEqualObjects(@"hi", o);
        x++;

        return dispatch_promise(^{
            return @YES;
        });
    }).then(^(id o){
        XCTAssertEqualObjects(@YES, o);
        x++;
    }).then(^(id o){
        XCTAssertNil(o);
        resolved = YES;
        x++;
    }).catch(^{
        XCTFail();
    });
    wait(0.1);
    XCTAssertTrue(resolved);
    XCTAssertEqual(x, 3);
}

- (void)test_26_promise_then_promise_fail_promise_fail {
    [NSURLConnection GET:URL].then(^{
        return [NSURLConnection GET:URL].then(^{
            @throw @1;
        }).catch(^{
            return [NSURLConnection GET:URL].then(^{
                @throw @1;
            });
        });
    }).then(^{
        XCTFail();
    }).catch(^{
        resolved = YES;
    });
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_27_eat_failure {
    [NSURLConnection GET:URL].then(^{
        @throw @1;
    }).catch(^{
        return @YES;
    }).then(^{
        resolved = YES;
    });
    wait(0.1);
    XCTAssertTrue(resolved);
}

PMKPromise *gcdreject() {
    return [PMKPromise new:^(id f, void(^rejecter)(id)){
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            dispatch_async(dispatch_get_main_queue(), ^{
                rejecter(nil);
            });
        });
    }];
}

- (void)test_28_deferred_rejected_catch_promise {
    __block int x = 0;
    gcdreject().catch(^{
        x++;
        return [NSURLConnection GET:URL];
    }).then(^(id o){
        XCTAssertEqualObjects(@"hi", o);
        resolved = YES;
    }).catch(^{
        XCTFail();
    });
    wait(0.1);
    XCTAssertTrue(resolved);
    XCTAssertEqual(x, 1);
}

- (void)test_29_deferred_rejected_catch_promise {
    __block int x = 0;
    gcdreject().catch(^{
        x++;
        return [NSURLConnection GET:@"http://localhost:61231/404"];
    }).then(^{
        XCTFail();
    }).catch(^(NSError *error){
        NSHTTPURLResponse *rsp = error.userInfo[PMKURLErrorFailingURLResponseKey];
        XCTAssertTrue([rsp isKindOfClass:[NSHTTPURLResponse class]]);
        XCTAssertEqual(rsp.statusCode, 404);
        resolved = YES;
    }).catch(^{
        XCTFail();
    });
    wait(0.1);
    XCTAssertTrue(resolved);
    XCTAssertEqual(x, 1);
}

- (void)test_30_dispatch_returns_pending_promise {
    dispatch_promise(^{
        return [NSURLConnection GET:URL];
    }).then(^{
        resolved = YES;
    });
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_31_dispatch_returns_promise {
    dispatch_promise(^{
        return [PMKPromise promiseWithValue:@1];
    }).then(^(id o){
        XCTAssertEqualObjects(o, @1);
        resolved = YES;
    });
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_32_return_primitive {
    promise.then(^(id o){
        XCTAssertEqualObjects(o, @32);
        return 3;
    }).then(^(id o){
        XCTAssertEqualObjects(@3, o);
        resolved = true;
    });
    fulfiller(@32);
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_33_return_nil {
    promise.then(^(id o){
        XCTAssertEqualObjects(o, @"HI");
        return nil;
    }).then(^{
        return nil;
    }).then(^(id o){
        XCTAssertNil(o);
        resolved = YES;
    });
    fulfiller(@"HI");
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_33a_return_nil {
    __block int x = 0;
    promise.then(^(id o){
        XCTAssertEqualObjects(o, @"HI");
        x++;
        return nil;
    }).then(^{
        return nil;
    }).then(^{
        x++;
        resolved = YES;
        return nil;
    });
    fulfiller(@"HI");
    wait(0.1);
    XCTAssertEqual(x, 2);
    XCTAssertTrue(resolved);
}

- (void)test_34 {
    [PMKPromise new:^(PMKPromiseFulfiller _fulfiller, id r){
        @throw @1;
        _fulfiller(@2);
    }].then(^{
        XCTFail();
    }).catch(^(NSError *error){
        resolved = YES;
        XCTAssertEqualObjects(error.userInfo[PMKUnderlyingExceptionKey], @1);
    });
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_35_when_nil {
    promise = promise.then(^{ return nil; });
    [PMKPromise when:@[[NSURLConnection GET:URL], [PMKPromise promiseWithValue:nil], promise]].then(^(NSArray *results){
        XCTAssertEqual(results.count, 3ul);
        XCTAssertEqualObjects(results[1], [NSNull null]);
        resolved = YES;
    }).catch(^(NSError *err){
        abort();
    });
    fulfiller(@"35");
    wait(0.2);
    XCTAssertTrue(resolved);
}

- (void)test_36_promise_with_value_nil {
    [PMKPromise promiseWithValue:nil].then(^(id o){
        XCTAssertNil(o);
        resolved = YES;
    });
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_37_PMKMany_2 {
    [NSURLConnection GET:URL].then(^(NSData *data, NSHTTPURLResponse *rsp){
        XCTAssertNotNil(data);
        XCTAssertNotNil(rsp);
        resolved = YES;
    });
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_38_PMKMany_3 {
    [NSURLConnection GET:URL].then(^(id data, id rsp, id originalData){
        XCTAssertNotNil(data);
        XCTAssertNotNil(rsp);
        XCTAssertNotNil(originalData);
        XCTAssertTrue([originalData isKindOfClass:NSData.class]);
        XCTAssertTrue([data isKindOfClass:NSString.class]);
        id str = [[NSString alloc] initWithData:originalData encoding:NSUTF8StringEncoding];
        XCTAssertEqualObjects(data, str);
        resolved = YES;
    });
    wait(0.2);
    XCTAssertTrue(resolved);
}

- (void)test_39_when_with_some_values {
    id p = [NSURLConnection GET:URL];
    id v = @1;
    [PMKPromise when:@[p, v]].then(^(NSArray *aa){
        XCTAssertEqual(aa.count, 2ul);
        XCTAssertEqualObjects(aa[1], @1);
        resolved = YES;
    });
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_40_when_with_all_values {
    [PMKPromise when:@[@1, @2]].then(^(NSArray *aa){
        XCTAssertEqualObjects(aa[0], @1);
        XCTAssertEqualObjects(aa[1], @2);
        resolved = YES;
    });
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_41_when_with_repeated_promises {
    id p = [NSURLConnection GET:URL];
    id v = @1;
    [PMKPromise when:@[p, v, p, v]].then(^(NSArray *aa){
        XCTAssertEqual(aa.count, 4ul);
        XCTAssertEqualObjects(aa[1], @1);
        XCTAssertEqualObjects(aa[3], @1);
        resolved = YES;
    });
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_42 {
    [PMKPromise promiseWithValue:@1].then(^{
        return [NSURLConnection GET:URL];
    }).then(^{
        resolved = YES;
    });
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_43_return_promise_from_itself {
    PMKPromise *p = [NSURLConnection GET:URL];
    p.then(^{
        return p;
    }).then(^{
        resolved = YES;
    });
    wait(0.2);
    XCTAssertTrue(resolved);
}

- (void)test_44_reseal {
    [PMKPromise new:^(PMKPromiseFulfiller _fulfiller, id r){
        _fulfiller(@123);
        _fulfiller(@234);
    }].then(^(id o){
        XCTAssertEqualObjects(o, @123);
        resolved = YES;
    });
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_45_when_which_returns_void {
    promise = promise.then(^{});
    [PMKPromise when:@[promise, [PMKPromise promiseWithValue:@1]]].then(^(NSArray *stuff){
        XCTAssertEqual(stuff.count, 2ul);
        XCTAssertEqualObjects(stuff[0], [NSNull null]);
        resolved = YES;
    });
    fulfiller(@1);
    wait(0.1);
    XCTAssertTrue(resolved); 
}

- (void)test_46_test_then_on {
    dispatch_queue_t q1 = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, 0);
    dispatch_queue_t q2 = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0);

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
    promise.thenOn(q1, ^{
        XCTAssertFalse([NSThread isMainThread]);
        return dispatch_get_current_queue();
    }).thenOn(q2, ^(id q){
        XCTAssertFalse([NSThread isMainThread]);
        XCTAssertNotEqualObjects(q, dispatch_get_current_queue());
        resolved = YES;
    });
#pragma clang diagnostic pop

    fulfiller(@1);
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_47_finally_plus {
    promise.then(^{
        return @1;
    }).finally(^{
        resolved = YES;
    });
    fulfiller(@1);
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_48_finally_negative {
    promise.then(^{
        @throw @1;
    }).finally(^{
        resolved = YES;
    });
    fulfiller(@1);
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_49_finally_negative_later {
    __block int x = 0;
    
    promise.then(^{
        XCTAssertEqual(++x, 1);
        @throw @1;
    }).catch(^{
        XCTAssertEqual(++x, 2);
    }).then(^{
        XCTAssertEqual(++x, 3);
    }).finally(^{
        XCTAssertEqual(++x, 4);
        resolved = YES;
    });
    fulfiller(@1);
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_50_fulfill_with_pending_promise {
    promise.then(^(NSString *hi){
        XCTAssertEqualObjects(hi, @"hi");
        resolved = YES;
    });
    fulfiller([NSURLConnection GET:URL]);
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_51_fulfill_with_fulfilled_promise {
    promise.then(^(id o){
        XCTAssertEqualObjects(o, @1);
        resolved = YES;
    });
    fulfiller([PMKPromise promiseWithValue:@1]);
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_52_fulfill_with_rejected_promise {
    promise.catch(^(NSError *err){
        resolved = YES;
    });
    fulfiller([PMKPromise promiseWithValue:[NSError new]]);
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_53_return_rejected_promise {
    promise.then(^{
        return [PMKPromise promiseWithValue:[NSError new]];
    }).catch(^{
        resolved = YES;
    });
    fulfiller(@1);
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_54_reject_with_rejected_promise {
    promise.catch(^(NSError *err){
        XCTAssertEqual(err.code, 123);
        resolved = YES;
    });
    id err = [NSError errorWithDomain:@"a" code:123 userInfo:nil];
    rejecter([PMKPromise promiseWithValue:err]);
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_55_all_dictionary {
    id promises = @{
        @1: @2,
        @2: @"abc",
        @"a": [NSURLConnection GET:URL]
    };
    [PMKPromise all:promises].then(^(NSDictionary *dict){
        XCTAssertEqual(dict.count, 3ul);
        XCTAssertEqualObjects(dict[@1], @2);
        XCTAssertEqualObjects(dict[@2], @"abc");
        XCTAssertEqualObjects(dict[@"a"], @"hi");
        resolved = YES;
    });
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_56_empty_array_when {
    PMKPromise *p = [PMKPromise when:@[]];
    p.then(^(NSArray *array){
        XCTAssertEqual(array.count, 0ul);
        resolved = YES;
    });
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_57_empty_array_all {
    PMKPromise *p = [PMKPromise all:@[]];
    p.then(^(NSArray *array){
        XCTAssertEqual(array.count, 0ul);
        resolved = YES;
    });
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_58_just_finally {
    promise.finally(^{
        resolved = YES;
    });
    fulfiller(nil);
    wait(0.1);
    XCTAssertTrue(resolved);
    
    resolved = NO;
    promise.finally(^{
        resolved = YES;
    });
    wait(0.1);
    XCTAssertTrue(resolved);
}

- (void)test_59_typedef {
    Promise *p1 = [Promise promiseWithValue:@1];
    XCTAssertEqualObjects(p1.value, @1);
    
    p1.then(^(id o){
        XCTAssertEqualObjects(o, @1);
        resolved = YES;
    });
    wait(0.1);
    XCTAssertTrue(resolved);    
}

@end

__EOBJC__
require_relative 'Private/xctest.rb'
